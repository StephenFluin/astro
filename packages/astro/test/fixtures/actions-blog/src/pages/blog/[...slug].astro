---
import { type CollectionEntry, getCollection, getEntry } from "astro:content";
import BlogPost from "../../layouts/BlogPost.astro";
import { db, eq, Comment, Likes } from "astro:db";
import { Like } from "../../components/Like";
import { actions, safe, actionNameProps } from "astro:actions";
import {PostComment} from '../../components/PostComment';

export const prerender = false;

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

type Props = CollectionEntry<"blog">;

const post = await getEntry("blog", Astro.params.slug);
const { Content } = await post.render();

const commentResult = await safe(Astro.locals.getActionResult(actions.blog.comment));

const comments = await db
  .select()
  .from(Comment)
  .where(eq(Comment.postId, post.id));

const initialLikes = await db
  .select()
  .from(Likes)
  .where(eq(Likes.postId, post.id))
  .get();
---

<BlogPost {...post.data}>
  <Like postId={post.id} initial={initialLikes?.likes ?? 0} client:load />

  <Content />

  <h2>Comments</h2>
	{!commentResult.success && <p class="error">{commentResult.error}</p>}
	<PostComment postId={post.id} client:load />
  <div>
    {
      comments.map((c) => (
        <article>
          <p>{c.body}</p>
          <p>{c.author}</p>
        </article>
      ))
    }
  </div>
</BlogPost>
